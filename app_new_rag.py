#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Flask Web App —Å –Ω–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º–æ–π –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è rag_minimal.py, simple_rag_working.py –∏ local_llm.py
"""

from flask import Flask, render_template, request, jsonify, session, redirect, url_for
import uuid
import time
import logging
from datetime import datetime
from typing import Dict, List, Optional
import os

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö RAG —Å–∏—Å—Ç–µ–º
try:
    from simple_rag_working import SimpleRAG, ADVANCED_MODE
    RAG_CLASS = SimpleRAG
    RAG_TYPE = "Advanced (Sentence Transformers)" if ADVANCED_MODE else "Basic (Text Search)"
except ImportError:
    from rag_minimal import MinimalRAG
    RAG_CLASS = MinimalRAG
    RAG_TYPE = "Minimal (TF-IDF)"

# –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
try:
    from local_llm import RAGWithLLM, LocalLLM
    LLM_AVAILABLE = True
except ImportError:
    LLM_AVAILABLE = False
    print("‚ùå local_llm.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'your-secret-key-here')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
rag_system = None
rag_with_llm = None
chat_sessions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π —á–∞—Ç–∞

def init_rag_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã —Å LLM"""
    global rag_system, rag_with_llm
    
    if rag_system is None:
        logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É: {RAG_TYPE}")
        rag_system = RAG_CLASS()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        demo_docs = [
            "Python - –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –û–û–ü, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. Python –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–µ–π –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞.",
            "RAG (Retrieval-Augmented Generation) - –º–µ—Ç–æ–¥ NLP, —Å–æ—á–µ—Ç–∞—é—â–∏–π –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∞ –∑–∞—Ç–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ.",
            "–í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –≠—Ç–æ –æ—Å–Ω–æ–≤–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º.",
            "Sentence Transformers - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Python –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π BERT –∏ –¥—Ä—É–≥–∏—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–æ–≤. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –≤–µ–∫—Ç–æ—Ä—ã.",
            "Qdrant - –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º –Ω–∞ Rust. –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ ML –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ FAISS.",
            "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–∞: –æ–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º (supervised), –±–µ–∑ —É—á–∏—Ç–µ–ª—è (unsupervised) –∏ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º (reinforcement). –ö–∞–∂–¥—ã–π —Ç–∏–ø —Ä–µ—à–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏.",
            "BERT - –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —ç–Ω–∫–æ–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–æ–≤. –ü—Ä–µ–¥–æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π —Å–ª–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
            "LangChain - —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ü–µ–ø–æ—á–µ–∫, –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ LLM.",
            "Flask - –º–∏–∫—Ä–æ—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Python. –ü—Ä–æ—Å—Ç–æ–π –∏ –≥–∏–±–∫–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è REST API –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –•–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è.",
            "TF-IDF (Term Frequency-Inverse Document Frequency) - —á–∏—Å–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ –∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞.",
            "Ollama - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤–∫–ª—é—á–∞—è Llama, Mistral, CodeLlama. –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.",
            "Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∞ NLP. –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –º–µ—Ö–∞–Ω–∏–∑–º–µ –≤–Ω–∏–º–∞–Ω–∏—è (attention), –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–µ–µ."
        ]
        
        rag_system.add_documents(demo_docs)
        logger.info("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –¥–µ–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if LLM_AVAILABLE:
            try:
                logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é LLM...")
                rag_with_llm = RAGWithLLM(rag_system, "ollama", "llama3.2")
                logger.info("‚úÖ LLM —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                rag_with_llm = None
        else:
            rag_with_llm = None

def get_session_id():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ session_id"""
    if 'session_id' not in session:
        session['session_id'] = str(uuid.uuid4())
    return session['session_id']

def generate_smart_answer(user_message: str, search_results: List[Dict]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    if not search_results:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if rag_with_llm:
        try:
            result = rag_with_llm.generate_rag_answer(user_message)
            return result["answer"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ LLM: {e}")
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    
    # –õ–æ–∫–∞–ª—å–Ω–∞—è —É–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    question_lower = user_message.lower()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    context_parts = []
    for i, result in enumerate(search_results[:3], 1):
        text = result["text"]
        score = result["score"]
        context_parts.append(f"{text}")
    
    context = " ".join(context_parts)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
    if any(word in question_lower for word in ["—á—Ç–æ —Ç–∞–∫–æ–µ", "—á—Ç–æ —ç—Ç–æ", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–æ–∑–Ω–∞—á–∞–µ—Ç"]):
        return generate_definition_answer(context, user_message, search_results)
    elif any(word in question_lower for word in ["–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–∫–∞–∫", "–ø—Ä–æ—Ü–µ—Å—Å", "–ø—Ä–∏–Ω—Ü–∏–ø"]):
        return generate_process_answer(context, user_message, search_results)
    elif any(word in question_lower for word in ["–∑–∞—á–µ–º", "–ø–æ—á–µ–º—É", "–¥–ª—è —á–µ–≥–æ", "—Ü–µ–ª—å"]):
        return generate_purpose_answer(context, user_message, search_results)
    elif any(word in question_lower for word in ["–≥–¥–µ", "–∫–æ–≥–¥–∞", "–∫—Ç–æ", "–∫–∞–∫–æ–π"]):
        return generate_factual_answer(context, user_message, search_results)
    elif "–ø—Ä–∏–≤–µ—Ç" in question_lower or "–¥–æ–±—Ä" in question_lower:
        return generate_greeting_answer(context, user_message, search_results)
    else:
        return generate_general_answer(context, user_message, search_results)

def generate_definition_answer(context: str, question: str, results: List[Dict]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    
    # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    sentences = context.split('.')
    definitions = []
    
    for sentence in sentences:
        if any(word in sentence.lower() for word in [" - —ç—Ç–æ", "–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π", "—è–≤–ª—è–µ—Ç—Å—è"]):
            definitions.append(sentence.strip())
    
    if definitions:
        main_def = definitions[0]
        answer = f"{main_def}."
        
        if len(definitions) > 1:
            answer += f" {definitions[1]}."
            
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if len(results) > 1:
            additional_info = results[1]["text"].split('.')[0]
            answer += f" –¢–∞–∫–∂–µ –≤–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å: {additional_info}."
            
        return answer
    else:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤—É –æ—Ç–≤–µ—Ç–∞
        main_text = results[0]["text"]
        return f"–°–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {main_text}"

def generate_process_answer(context: str, question: str, results: List[Dict]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    
    sentences = context.split('.')
    process_words = ["–∏—Å–ø–æ–ª—å–∑—É–µ—Ç", "–ø—Ä–∏–º–µ–Ω—è–µ—Ç", "—Ä–∞–±–æ—Ç–∞–µ—Ç", "–≤—ã–ø–æ–ª–Ω—è–µ—Ç", "—Å–æ—á–µ—Ç–∞–µ—Ç", "–ø–æ–∑–≤–æ–ª—è–µ—Ç", "–æ—Å–Ω–æ–≤–∞–Ω"]
    
    process_sentences = []
    for sentence in sentences:
        if any(word in sentence.lower() for word in process_words):
            process_sentences.append(sentence.strip())
    
    if process_sentences:
        answer = f"{process_sentences[0]}."
        if len(process_sentences) > 1:
            answer += f" {process_sentences[1]}."
        return answer
    else:
        return f"–ü–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {results[0]['text']}"

def generate_purpose_answer(context: str, question: str, results: List[Dict]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏"""
    
    purpose_words = ["–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞", "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è", "–Ω—É–∂–µ–Ω", "–¥–ª—è", "—Ü–µ–ª—å", "–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è"]
    sentences = context.split('.')
    
    purpose_sentences = []
    for sentence in sentences:
        if any(word in sentence.lower() for word in purpose_words):
            purpose_sentences.append(sentence.strip())
    
    if purpose_sentences:
        return f"–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: {purpose_sentences[0]}."
    else:
        return f"–°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º: {results[0]['text']}"

def generate_factual_answer(context: str, question: str, results: List[Dict]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    
    sentences = context.split('.')
    factual_sentences = [s.strip() for s in sentences if len(s.strip()) > 20][:2]
    
    return f"–ò–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {'. '.join(factual_sentences)}."

def generate_greeting_answer(context: str, question: str, results: List[Dict]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    
    greetings = [
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã."
    ]
    
    import random
    base_greeting = random.choice(greetings)
    
    if results:
        topic = results[0]["text"].split('.')[0]
        return f"{base_greeting} –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ: {topic}."
    else:
        return base_greeting

def generate_general_answer(context: str, question: str, results: List[Dict]) -> str:
    """–û–±—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
    
    sentences = context.split('.')
    key_sentences = [s.strip() for s in sentences if len(s.strip()) > 15][:2]
    
    return f"–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {'. '.join(key_sentences)}."

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    init_rag_system()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    if hasattr(rag_system, 'get_stats'):
        stats = rag_system.get_stats()
    else:
        stats = {
            "total_documents": len(rag_system.documents) if hasattr(rag_system, 'documents') else 0,
            "method": RAG_TYPE
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ LLM
    stats["llm_available"] = LLM_AVAILABLE and rag_with_llm is not None
    
    return render_template('index_new.html', 
                         rag_type=RAG_TYPE, 
                         stats=stats)

@app.route('/chat', methods=['POST'])
def chat():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        init_rag_system()
        
        data = request.get_json()
        user_message = data.get('message', '').strip()
        session_id = get_session_id()
        
        if not user_message:
            return jsonify({'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}), 400
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        
        # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        search_results = rag_system.search(user_message, top_k=3)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        ai_response = generate_smart_answer(user_message, search_results)
        
        response_time = time.time() - start_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
        if session_id not in chat_sessions:
            chat_sessions[session_id] = []
        
        chat_entry = {
            'timestamp': datetime.now().strftime('%H:%M:%S'),
            'user_message': user_message,
            'ai_response': ai_response,
            'response_time': response_time,
            'documents_found': len(search_results),
            'search_results': search_results,
            'llm_used': LLM_AVAILABLE and rag_with_llm is not None
        }
        
        chat_sessions[session_id].append(chat_entry)
        
        return jsonify({
            'success': True,
            'response': ai_response,
            'response_time': f"{response_time:.2f}s",
            'documents_found': len(search_results),
            'search_results': search_results[:3],  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-3 –¥–ª—è UI
            'llm_used': LLM_AVAILABLE and rag_with_llm is not None
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}'}), 500

@app.route('/search', methods=['POST'])
def search():
    """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        init_rag_system()
        
        data = request.get_json()
        query = data.get('query', '').strip()
        top_k = data.get('top_k', 5)
        
        if not query:
            return jsonify({'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å'}), 400
        
        start_time = time.time()
        results = rag_system.search(query, top_k=top_k)
        search_time = time.time() - start_time
        
        return jsonify({
            'success': True,
            'query': query,
            'results': results,
            'search_time': f"{search_time:.3f}s",
            'total_found': len(results)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}'}), 500

@app.route('/add_document', methods=['POST'])
def add_document():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        init_rag_system()
        
        data = request.get_json()
        text = data.get('text', '').strip()
        
        if not text:
            return jsonify({'error': '–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞'}), 400
        
        if len(text) < 10:
            return jsonify({'error': '–î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)'}), 400
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        rag_system.add_documents([text])
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if hasattr(rag_system, 'get_stats'):
            stats = rag_system.get_stats()
        else:
            stats = {
                "total_documents": len(rag_system.documents) if hasattr(rag_system, 'documents') else 0
            }
        
        return jsonify({
            'success': True,
            'message': '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
            'stats': stats
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {str(e)}'}), 500

@app.route('/stats')
def stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        init_rag_system()
        
        if hasattr(rag_system, 'get_stats'):
            system_stats = rag_system.get_stats()
        else:
            system_stats = {
                "total_documents": len(rag_system.documents) if hasattr(rag_system, 'documents') else 0,
                "method": RAG_TYPE
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ LLM
        system_stats["llm_available"] = LLM_AVAILABLE and rag_with_llm is not None
        if rag_with_llm:
            system_stats["llm_type"] = rag_with_llm.llm.model_type
            system_stats["llm_model"] = rag_with_llm.llm.model_name
        
        session_id = get_session_id()
        chat_history = chat_sessions.get(session_id, [])
        
        return jsonify({
            'system_stats': system_stats,
            'rag_type': RAG_TYPE,
            'chat_messages': len(chat_history),
            'session_id': session_id,
            'llm_available': system_stats["llm_available"]
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/chat_history')
def chat_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    session_id = get_session_id()
    history = chat_sessions.get(session_id, [])
    
    return jsonify({
        'success': True,
        'history': history,
        'total_messages': len(history)
    })

@app.route('/clear_chat', methods=['POST'])
def clear_chat():
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    session_id = get_session_id()
    if session_id in chat_sessions:
        chat_sessions[session_id] = []
    
    return jsonify({'success': True, 'message': '–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞'})

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        init_rag_system()
        return jsonify({
            'status': 'healthy',
            'rag_type': RAG_TYPE,
            'llm_available': LLM_AVAILABLE and rag_with_llm is not None,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º–æ–π –∏ LLM")
    logger.info(f"üìä –¢–∏–ø RAG: {RAG_TYPE}")
    logger.info(f"ü§ñ LLM –¥–æ—Å—Ç—É–ø–Ω–∞: {LLM_AVAILABLE}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_rag_system()
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(
        host='0.0.0.0',
        port=5000,
        debug=True
    ) 