#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Configuration management for RAG Chat Bot
"""

import os
import torch
from dotenv import load_dotenv
import logging

# Load environment variables
load_dotenv()

logger = logging.getLogger(__name__)

class Config:
    """Configuration class for RAG Chat Bot"""
    
    # Mistral API Configuration (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑ .env)
    MISTRAL_API_KEY = os.getenv('MISTRAL_API_KEY', '')
    
    # Ollama Configuration (–ø—É–±–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    OLLAMA_BASE_URL = 'http://localhost:11434'
    OLLAMA_MODEL = 'mistral'
    
    # GPU Configuration (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è)
    USE_GPU = torch.cuda.is_available()
    CUDA_DEVICE = 0
    GPU_MEMORY_FRACTION = 0.8
    
    # FAISS Configuration (–∏—Å–ø–æ–ª—å–∑—É–µ–º GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    FAISS_USE_GPU = torch.cuda.is_available()
    FAISS_GPU_DEVICE = 0
    
    # Embedding Configuration (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –ø–æ–¥ RTX 4060)
    EMBEDDING_MODEL = 'all-MiniLM-L6-v2'
    EMBEDDING_DEVICE = 'cuda:0' if torch.cuda.is_available() else 'cpu'
    
    # Document Processing (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
    MAX_CHUNK_SIZE = 500
    CHUNK_OVERLAP = 50
    SIMILARITY_THRESHOLD = 0.1
    
    # Memory Configuration (–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫)
    MEMORY_SEARCH_TOP_K = 3
    DOCUMENT_SEARCH_TOP_K = 5
    
    # Flask Configuration (–≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É)
    FLASK_DEBUG = True
    FLASK_HOST = '0.0.0.0'
    FLASK_PORT = 5000
    
    # Logging
    LOG_LEVEL = 'INFO'
    
    @classmethod
    def validate_gpu_setup(cls):
        """Validate GPU setup and configuration"""
        if not torch.cuda.is_available():
            logger.warning("CUDA –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ CPU")
            cls.USE_GPU = False
            cls.FAISS_USE_GPU = False
            cls.EMBEDDING_DEVICE = 'cpu'
            return False
            
        gpu_count = torch.cuda.device_count()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {gpu_count} GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        if cls.CUDA_DEVICE >= gpu_count:
            logger.warning(f"GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {cls.CUDA_DEVICE} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPU 0")
            cls.CUDA_DEVICE = 0
            cls.FAISS_GPU_DEVICE = 0
            cls.EMBEDDING_DEVICE = 'cuda:0'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å GPU
        gpu_memory = torch.cuda.get_device_properties(cls.CUDA_DEVICE).total_memory
        gpu_memory_gb = gpu_memory / (1024**3)
        logger.info(f"GPU {cls.CUDA_DEVICE}: {torch.cuda.get_device_name(cls.CUDA_DEVICE)}")
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: {gpu_memory_gb:.1f} GB")
        
        if gpu_memory_gb < 4:
            logger.warning("–ú–∞–ª–æ –ø–∞–º—è—Ç–∏ GPU, —É–º–µ–Ω—å—à–∞–µ–º batch size")
            cls.GPU_MEMORY_FRACTION = 0.6
        
        return True
    
    @classmethod
    def setup_logging(cls):
        """Setup logging configuration"""
        logging.basicConfig(
            level=getattr(logging, cls.LOG_LEVEL.upper()),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
    
    @classmethod
    def print_config(cls):
        """Print current configuration"""
        logger.info("=== üöÄ RAG Chat Bot Configuration ===")
        logger.info(f"üñ•Ô∏è  GPU –¥–æ—Å—Ç—É–ø–Ω–æ: {torch.cuda.is_available()}")
        logger.info(f"‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU: {cls.USE_GPU}")
        logger.info(f"üéØ CUDA —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {cls.CUDA_DEVICE}")
        logger.info(f"üîç FAISS GPU: {cls.FAISS_USE_GPU}")
        logger.info(f"üß† Embedding —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {cls.EMBEDDING_DEVICE}")
        logger.info(f"üåê Ollama URL: {cls.OLLAMA_BASE_URL}")
        logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {cls.OLLAMA_MODEL}")
        logger.info(f"üîë Mistral API: {'‚úì —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if cls.MISTRAL_API_KEY else '‚úó –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        logger.info("=====================================")

# Initialize configuration
config = Config()
config.setup_logging()
config.validate_gpu_setup()
config.print_config() 